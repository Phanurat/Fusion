import os
import time
import datetime
import requests
import json

import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, StringVar


# --------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤ (Copy/Paste/Cut/Select All) --------------------- #
def show_context_menu(event, widget, menu):
    menu.widget = widget  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏µ‡πà widget ‡πÑ‡∏´‡∏ô
    menu.tk_popup(event.x_root, event.y_root)

def copy_text(menu, root):
    widget = menu.widget
    try:
        widget.event_generate("<<Copy>>")
    except:
        pass

def paste_text(menu, root):
    widget = menu.widget
    try:
        widget.event_generate("<<Paste>>")
    except:
        pass

def cut_text(menu, root):
    widget = menu.widget
    try:
        widget.event_generate("<<Cut>>")
    except:
        pass

def select_all_text(menu):
    widget = menu.widget
    try:
        widget.event_generate("<<SelectAll>>")
    except:
        pass
    return "break"

def bind_keys_for_textbox(text_widget):
    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Ctrl+A, Ctrl+X, Ctrl+C, Ctrl+V ‡πÑ‡∏î‡πâ
    text_widget.bind("<Control-a>", lambda e: text_widget.event_generate("<<SelectAll>>"))
    text_widget.bind("<Control-A>", lambda e: text_widget.event_generate("<<SelectAll>>"))
    text_widget.bind("<Control-x>", lambda e: text_widget.event_generate("<<Cut>>"))
    text_widget.bind("<Control-X>", lambda e: text_widget.event_generate("<<Cut>>"))
    text_widget.bind("<Control-c>", lambda e: text_widget.event_generate("<<Copy>>"))
    text_widget.bind("<Control-C>", lambda e: text_widget.event_generate("<<Copy>>"))
    text_widget.bind("<Control-v>", lambda e: text_widget.event_generate("<<Paste>>"))
    text_widget.bind("<Control-V>", lambda e: text_widget.event_generate("<<Paste>>"))
    # Undo/Redo (Ctrl+Z, Ctrl+Y) ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô CTkTextbox ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

# --------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô save_adb_script (‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏î‡∏¥‡∏°) --------------------- #
def save_adb_script(device, fb_post_url, text):
    print("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå ADB Script...")  # Debug

    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S_%f")
    file_name = f"adb_script_{timestamp}.py"

    folder_path = "test"
    os.makedirs(folder_path, exist_ok=True)  
    save_path = rf"{folder_path}\{file_name}"
    script_content = f'''import os
import time

device = "{device}"
os.system(f"adb -s {{device}} shell ime set com.android.adbkeyboard/.AdbIME")
fb_post_url = "{fb_post_url}"
os.system(f'adb -s {{device}} shell am start -a android.intent.action.VIEW -d "{{fb_post_url}}" com.android.chrome')
time.sleep(5)
os.system(f"adb -s {{device}} shell input tap 720 1776")
time.sleep(5)
text = "{text}"
for char in text:
    adb_command = f'adb -s {device} shell am broadcast -a ADB_INPUT_TEXT --es msg "{{char}}"'
    os.system(adb_command)
    time.sleep(0.1)
time.sleep(0.5)
os.system(f"adb -s {device} shell input keyevent 61 66")
'''

    print(f"üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà: {save_path}")  # Debug

    with open(save_path, "w", encoding="utf-8") as file:
        file.write(script_content)

    print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà {save_path} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")


# --------------------- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (Local Data) --------------------- #
local_data = [
# {"id": 1, "userpc": "5200b4c053c8c4eb", "package_name": "com.android.chrome", "gender": "‡∏ä‡∏≤‡∏¢", "age": 50, "occupation": "-", "personality": "-", "comment": "-", "political_orientation": "-", "link": "https://www.facebook.com/sorrayuth9115/posts/1255243385962598"},
# {"id": 2, "userpc": "52003627eca9c45d", "package_name": "com.android.chromf", "gender": "‡∏´‡∏ç‡∏¥‡∏á", "age": 50, "occupation": "-", "personality": "-", "comment": "-", "political_orientation": "-", "link": "https://www.facebook.com/sorrayuth9115/posts/1255243385962598"},
# {"id": 3, "userpc": "5200a554ee0284fb", "package_name": "com.android.chrome", "gender": "‡∏´‡∏ç‡∏¥‡∏á", "age": 40, "occupation": "-", "personality": "-", "comment": "-", "political_orientation": "-", "link": "https://www.facebook.com/sorrayuth9115/posts/1255243385962598"},
# {"id": 4, "userpc": "5200a554ee0284fb", "package_name": "com.android.chromf", "gender": "‡∏ä‡∏≤‡∏¢", "age": 40, "occupation": "-", "personality": "-", "comment": "-", "political_orientation": "-", "link": "https://www.facebook.com/sorrayuth9115/posts/1255243385962598"},
# {"id": 5, "userpc": "52008dd8fec325dd", "package_name": "com.android.chrome", "gender": "‡∏´‡∏ç‡∏¥‡∏á", "age": 30, "occupation": "-", "personality": "-", "comment": "-", "political_orientation": "-", "link": "https://www.facebook.com/sorrayuth9115/posts/1255243385962598"},
# {"id": 6, "userpc": "52008dd8fec325dd", "package_name": "com.android.chromf", "gender": "‡∏ä‡∏≤‡∏¢", "age": 30, "occupation": "-", "personality": "-", "comment": "-", "political_orientation": "-", "link": "https://www.facebook.com/sorrayuth9115/posts/1255243385962598"},
# {"id": 7, "userpc": "5200ca24528715f5", "package_name": "com.android.chrome", "gender": "‡∏ä‡∏≤‡∏¢", "age": 20, "occupation": "-", "personality": "-", "comment": "-", "political_orientation": "-", "link": "https://www.facebook.com/sorrayuth9115/posts/1255243385962598"},
# {"id": 8, "userpc": "5200ca24528715f5", "package_name": "com.android.chromf", "gender": "‡∏´‡∏ç‡∏¥‡∏á", "age": 20, "occupation": "-", "personality": "-", "comment": "-", "political_orientation": "-", "link": "https://www.facebook.com/sorrayuth9115/posts/1255243385962598"},






]


# --------------------- ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ --------------------- #
ctk.set_appearance_mode("blue") #‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Messenger
ctk.set_default_color_theme("blue")

class APIDataApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title("üí¨ Messenger-Style ADB Script Generator")
        self.geometry("900x600")

        # ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤ (context menu) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Text/Entry ---------- #
        self.widget_context_menu = tk.Menu(self, tearoff=0)
        self.widget_context_menu.add_command(
            label="‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å (Copy)",
            command=lambda: copy_text(self.widget_context_menu, self)
        )
        self.widget_context_menu.add_command(
            label="‡∏ß‡∏≤‡∏á (Paste)",
            command=lambda: paste_text(self.widget_context_menu, self)
        )
        self.widget_context_menu.add_command(
            label="‡∏ï‡∏±‡∏î (Cut)",
            command=lambda: cut_text(self.widget_context_menu, self)
        )
        self.widget_context_menu.add_command(
            label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Select All)",
            command=lambda: select_all_text(self.widget_context_menu)
        )

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Entry
        self.device_var = StringVar()
        self.fb_url_var = StringVar()
        self.text_var = StringVar()

        # --------------------- Header Label --------------------- #
        self.header_label = ctk.CTkLabel(self, text="üí¨ API Data Merger & ADB Script Generator", font=("Arial", 18, "bold"))
        self.header_label.pack(pady=10)

        # --------------------- Entry: Device ID --------------------- #
        ctk.CTkLabel(self, text="Device ID (UserPC):").pack(pady=2)
        self.device_entry = ctk.CTkEntry(self, textvariable=self.device_var, state="readonly")
        self.device_entry.pack(pady=2)
        self.device_entry.bind("<Button-3>", lambda e: show_context_menu(e, self.device_entry, self.widget_context_menu))

        # --------------------- Entry: Facebook Post URL --------------------- #
        ctk.CTkLabel(self, text="Facebook Post URL:").pack(pady=2)
        self.fb_url_entry = ctk.CTkEntry(self, textvariable=self.fb_url_var, placeholder_text="‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå Facebook", width=700, height=30)
        self.fb_url_entry.pack(pady=2)
        self.fb_url_entry.bind("<Button-3>", lambda e: show_context_menu(e, self.fb_url_entry, self.widget_context_menu))

        # --------------------- Entry: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå --------------------- #
        ctk.CTkLabel(self, text="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå (Comment):").pack(pady=2)
        self.text_entry = ctk.CTkEntry(self, textvariable=self.text_var, width=700, height=30)
        self.text_entry.pack(pady=2)
        self.text_entry.bind("<Button-3>", lambda e: show_context_menu(e, self.text_entry, self.widget_context_menu))

        # --------------------- ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå ADB --------------------- #
        self.save_button = ctk.CTkButton(self, text="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå ADB", command=self.save_script)
        self.save_button.pack(pady=10)

        # --------------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• --------------------- #
        frame = ctk.CTkFrame(self)
        frame.pack(pady=10, expand=True, fill="both")

        self.tree_scroll_y = ttk.Scrollbar(frame, orient="vertical")
        self.tree_scroll_y.pack(side="right", fill="y")

        self.tree_scroll_x = ttk.Scrollbar(frame, orient="horizontal")
        self.tree_scroll_x.pack(side="bottom", fill="x")


        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Selected" ‡πÑ‡∏ß‡πâ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡πá‡∏≠‡∏Å‡∏ã‡πå (‚úì / ‡∏ß‡πà‡∏≤‡∏á)
        self.columns = (
            "ID", "UserPC", "package_name", "Gender", "Age", 
            "Occupation", "Personality", "Comment", "Political", 
            "link", "Selected"
        )

        self.tree = ttk.Treeview(
            frame, 
            columns=self.columns, 
            show="headings",
            yscrollcommand=self.tree_scroll_y.set,
            xscrollcommand=self.tree_scroll_x.set
        )

        self.tree.tag_configure("selected_row", background="#CCE5FF")  # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô

        # ‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        self.tree.heading("ID", text="ID")
        self.tree.column("ID", width=40, anchor="center")

        self.tree.heading("UserPC", text="UserPC")
        self.tree.column("UserPC", width=120, anchor="center")

        self.tree.heading("package_name", text="package_name")
        self.tree.column("package_name", width=120, anchor="center")

        self.tree.heading("Gender", text="Gender")
        self.tree.column("Gender", width=60, anchor="center")

        self.tree.heading("Age", text="Age")
        self.tree.column("Age", width=40, anchor="center")

        self.tree.heading("Occupation", text="Occupation")
        self.tree.column("Occupation", width=40, anchor="center")

        self.tree.heading("Personality", text="Personality")
        self.tree.column("Personality", width=40, anchor="center")

        self.tree.heading("Comment", text="Comment")
        self.tree.column("Comment", width=200, anchor="center")

        self.tree.heading("Political", text="Political")
        self.tree.column("Political", width=10, anchor="center")

        self.tree.heading("link", text="link")
        self.tree.column("link", width=15, anchor="center")

        self.tree.heading("Selected", text="Selected")
        self.tree.column("Selected", width=60, anchor="center")

        self.tree.pack(expand=True, fill="both")
        self.tree_scroll_y.config(command=self.tree.yview)
        self.tree_scroll_x.config(command=self.tree.xview)

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ checkbox ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ row
        self.check_states = {}

        # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ single-click -> toggle checkbox ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô "Selected"
        self.tree.bind("<Button-1>", self.on_tree_click)

        # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ release -> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å row => ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï entry
        self.tree.bind("<ButtonRelease-1>", self.select_row)

        # Double-click -> ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Comment => ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        self.tree.bind("<Double-1>", self.on_tree_double_click)

        # --------------------- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å (Local data) --------------------- #
        self.full_data = []
        self.load_local_data()

        # --------------------- ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API --------------------- #
        self.load_button = ctk.CTkButton(self, text="‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API", command=self.fetch_json)
        self.load_button.pack(pady=5)
    # --------------------------------------------------------------------------------
    # ‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    # --------------------------------------------------------------------------------
    def load_local_data(self):
        self.full_data = local_data
        self.update_table(self.full_data)

    def fetch_json(self):
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
            with open("local_data.json", "r", encoding="utf-8") as data_json:
                data = json.load(data_json)  # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if isinstance(data, list):
                    print("\n‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å local_data.json:")
                    print(json.dumps(data, indent=4, ensure_ascii=False))  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

                    #Test Case 
                    # selected = 1  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å id ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                    # userpc = [item.get("userpc", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") for item in data if item["id"] == selected]
                    # comments = [item.get("comment", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") for item in data if item["id"] == selected]
                    # links = [item.get("link", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") for item in data if item["id"] == selected]
                    #data = json.dumps(data, indent=4, ensure_ascii=False)
                    # print("\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô:")
                    # print("User PC:", userpc)
                    # print("Comments:", comments)
                    # print("Links:", links)
                    # print("ALL ================")
                    #print(data)

                    # self.save_script(self)
                    self.update_table(data) 

        except FileNotFoundError:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå local_data.json")
        except json.JSONDecodeError:
            print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á JSON")
        except Exception as e:
            print(f"‚ùå Error: {e}")
            
    # --------------------------------------------------------------------------------
    # ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    # --------------------------------------------------------------------------------
    def update_table(self, data):
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        for item in self.tree.get_children():
            self.tree.delete(item)
        self.check_states.clear()
        # print("class update_table", data)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        for d in data:
            values = (
                d["id"],
                d["userpc"],
                d["package_name"],
                d["gender"],
                d["age"],
                d["occupation"],
                d["personality"],
                d["comment"],
                d["political_orientation"],
                d["link"],
                " "  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á
            )
            # print("class update for : ",values)
            row_id = self.tree.insert("", "end", values=values)
            self.check_states[row_id] = False

    # --------------------------------------------------------------------------------
    # ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ single-click -> toggle checkbox
    # --------------------------------------------------------------------------------
    def on_tree_click(self, event):
        region = self.tree.identify("region", event.x, event.y)
        if region == "cell":
            col = self.tree.identify_column(event.x)
            if col == "#11":  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Selected
                row_id = self.tree.identify_row(event.y)
                if row_id:
                    current_state = self.check_states[row_id]
                    new_state = not current_state
                    self.check_states[row_id] = new_state
                    self.tree.set(row_id, "Selected", "‚úì" if new_state else " ")

    # --------------------------------------------------------------------------------
    # ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Entry
    # --------------------------------------------------------------------------------
    def select_row(self, event):
        selected_item = self.tree.selection()  # ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô tuple ‡πÄ‡∏ä‡πà‡∏ô ("I001",)

        # 1) ‡∏•‡πâ‡∏≤‡∏á tag "selected_row" ‡∏≠‡∏≠‡∏Å‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
        for item_id in self.tree.get_children():
            self.tree.item(item_id, tags="")

        # 2) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á)
        if selected_item:
            # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ row id ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å (‡πÄ‡∏ä‡πà‡∏ô "I001")
            row_id = selected_item[0]

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Tag "selected_row"
            self.tree.item(row_id, tags=("selected_row",))

            # --- ‡∏™‡πà‡∏ß‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Entry (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ---
            values = self.tree.item(row_id, "values")
            self.device_var.set(values[1])  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            self.text_var.set(values[7])
            self.fb_url_var.set(values[9])


    # --------------------------------------------------------------------------------
    # Double-click -> ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Comment => ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    # --------------------------------------------------------------------------------
    def on_tree_double_click(self, event):
        region = self.tree.identify("region", event.x, event.y)
        col = self.tree.identify_column(event.x)
        row_id = self.tree.identify_row(event.y)

        if region == "cell" and col == "#8" and row_id:
            item_values = self.tree.item(row_id, "values")
            current_comment = item_values[7]
            self.open_comment_editor(row_id, current_comment)

    def open_comment_editor(self, row_id, current_text):
        editor_window = ctk.CTkToplevel(self)
        editor_window.title("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Comment")
        editor_window.geometry("400x300")

        ctk.CTkLabel(editor_window, text="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Comment:", font=("Arial", 14)).pack(pady=5)

        text_editor = ctk.CTkTextbox(editor_window, width=350, height=150)
        text_editor.pack(pady=5)

        text_editor.insert("1.0", current_text)
        bind_keys_for_textbox(text_editor)
        text_editor.bind("<Button-3>", lambda e: show_context_menu(e, text_editor, self.widget_context_menu))

        def save_edited_comment():
            new_comment = text_editor.get("1.0", "end-1c")
            item_values = list(self.tree.item(row_id, "values"))
            item_values[7] = new_comment
            self.tree.item(row_id, values=item_values)

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô self.full_data ‡∏î‡πâ‡∏ß‡∏¢
            data_id = item_values[0]
            for d in self.full_data:
                if str(d["id"]) == str(data_id):
                    d["comment"] = new_comment
                    break

            editor_window.destroy()

        save_button = ctk.CTkButton(editor_window, text="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", command=save_edited_comment)
        save_button.pack(pady=5)

    # --------------------------------------------------------------------------------
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå ADB (‡∏ï‡∏≤‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏î‡∏¥‡∏°) ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡πä‡∏Å
    # --------------------------------------------------------------------------------
    def save_script(self):
        for row_id, checked in self.check_states.items():
            if checked:
                row_values = self.tree.item(row_id, "values")
                # (ID,UserPC,package,Gender,Age,Occup,Personality,Comment,Political,link,Selected)
                device = row_values[1]      # UserPC
                text = row_values[7]        # Comment
                fb_post_url = row_values[9] # link

                print("Device :", device)
                print("Test", text)
                print("fb_link", fb_post_url)

                # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô save_adb_script ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÅ‡∏Å‡πâ‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏î‡∏¥‡∏°
                save_adb_script(device, fb_post_url, text)


if __name__ == "__main__":
    app = APIDataApp()
    app.mainloop()